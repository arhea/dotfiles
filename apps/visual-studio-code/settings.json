{
    "workbench.colorTheme": "GitHub Dark",
    "editor.fontSize": 13,
    "editor.fontFamily": "UbutnuMono Nerd Font Mono",
    "editor.wordWrap": "off",
    "editor.inlineSuggest.enabled": true,
    "editor.accessibilitySupport": "off",
    "editor.formatOnSave": false,
    "editor.formatOnPaste": false,
    "editor.formatOnType": false,
    "editor.codeActionsOnSave": {},
    "editor.suggestSelection": "first",
    "security.workspace.trust.untrustedFiles": "open",
    "terminal.external.osxExec": "Warp.app",
    "terminal.integrated.fontFamily": "RobotoMono Nerd Font Mono",
    "terminal.integrated.fontSize": 13,
    "json.schemaDownload.enable": true,
    "json.format.keepLines": true,
    "terminal.integrated.profiles.osx": {
        "zsh": {
            "path": "/opt/homebrew/bin/zsh"
        },
        "bash": {
            "path": "/opt/homebrew/bin/bash"
        }
    },
    "extensions.autoUpdate": true,

    // prettier configuration
    "prettier.enable": true,
    "prettier.semi": false,
    "prettier.printWidth": 120,
    "prettier.trailingComma": "es5",
    "prettier.singleQuote": true,
    "prettier.vueIndentScriptAndStyle": false,

    // formatting editorconfig
    "[editorconfig]": {
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "EditorConfig.EditorConfig"
    },
    // typescript specific settings
    "[typescript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.codeActionsOnSave": [
            "source.organizeImports",
            "source.formatDocument",
            "source.fixAll.eslint"
        ]
    },
    // typescript specific settings
    "[javascript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.codeActionsOnSave": [
            "source.organizeImports",
            "source.formatDocument",
            "source.fixAll.eslint"
        ]
    },
    // terraform formatting options
    "[terraform]": {
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "hashicorp.terraform"
    },
    // markdown formatting options
    "[markdown]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.codeActionsOnSave": ["source.formatDocument", "source.fixAll"]
    },
    "[html]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.codeActionsOnSave": ["source.formatDocument", "source.fixAll"]
    },
    // json formatting options
    "[json]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.codeActionsOnSave": ["source.formatDocument", "source.fixAll"]
    },
    "[jsonc]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.codeActionsOnSave": ["source.formatDocument", "source.fixAll"]
    },
    // yaml formatting options
    "[yaml]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.codeActionsOnSave": ["source.formatDocument", "source.fixAll"]
    },
    // css formatting options
    "[css]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.codeActionsOnSave": ["source.formatDocument", "source.fixAll"]
    },
    // scss formatting options
    "[scss]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.codeActionsOnSave": ["source.formatDocument", "source.fixAll"]
    },
    // we want to support make files as well
    "[makefile]": {
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "ms-vscode.makefile-tools"
    },
    // go specific settings
    "[go]": {
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "golang.go"
    },
    "go.useLanguageServer": true,
    "gopls": {
        "ui.semanticTokens": true,
        "ui.completion.usePlaceholders": true
    },
    "go.toolsManagement.autoUpdate": true,
    "go.formatTool": "goimports",
    "go.lintTool": "golangci-lint",
    "go.lintOnSave": "workspace",
    "go.lintFlags": ["--fast"],
    // javascript settings
    "javascript.updateImportsOnFileMove.enabled": "always",
    // redhat yaml
    "redhat.telemetry.enabled": false,
    // error lens
    "errorLens.enabledDiagnosticLevels": ["warning", "info", "error"],
    // terraform
    "terraform.languageServer.enable": true
}
